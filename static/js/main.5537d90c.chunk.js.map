{"version":3,"sources":["lib/hooks.ts","lib/dom.ts","components/SwiperItem.tsx","components/Swiper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRefValue","ref","current","getTouchEventData","e","changedTouches","SwiperItem","imageSrc","imageAlt","className","src","alt","draggable","Swiper","items","containerRef","useRef","containerWidthRef","minOffsetXRef","currentOffsetXRef","startXRef","defaultValue","useState","state","_setState","value","useStateRef","offsetX","setOffsetX","offsetXRef","isSwiping","setIsSwiping","currentIdx","setCurrentIdx","onTouchMove","currentX","clientX","diff","newOffsetX","minOffsetX","onTouchEnd","currentOffsetX","containerWidth","Math","abs","floor","ceil","round","window","removeEventListener","onTouchStart","containerEl","offsetWidth","scrollWidth","addEventListener","onMouseDown","style","transform","map","item","idx","_item","onClick","indicatorOnClick","App","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5537d90c.chunk.js","sourcesContent":["import { useRef, useState, RefObject } from 'react';\n\nexport function getRefValue<C>(ref: RefObject<C>) {\n  return ref.current as C;\n}\n\nexport function useStateRef<S>(\n  defaultValue: S\n): [S, (value: S) => void, RefObject<S>] {\n  const ref = useRef<S>(defaultValue);\n  const [state, _setState] = useState<S>(defaultValue);\n  const setState = (value: S) => {\n    _setState(value);\n    ref.current = value;\n  };\n\n  return [state, setState, ref];\n}\n","import React from 'react';\n\nexport function getTouchEventData(\n  e:\n    | TouchEvent\n    | MouseEvent\n    | React.TouchEvent<HTMLElement>\n    | React.MouseEvent<HTMLElement>\n) {\n  return 'changedTouches' in e ? e.changedTouches[0] : e;\n}\n","import React from 'react';\nimport { SwiperItemType } from '../types';\n\nimport './SwiperItem.css';\n\nexport type Props = SwiperItemType;\n\nfunction SwiperItem({ imageSrc, imageAlt }: Props) {\n  return (\n    <li className=\"swiper-item\">\n      <img\n        src={imageSrc}\n        alt={imageAlt}\n        className=\"swiper-img\"\n        draggable={false}\n      />\n    </li>\n  );\n}\n\nexport default SwiperItem;\n","import React, { useState, useRef } from 'react';\nimport { getRefValue, useStateRef } from '../lib/hooks';\nimport { getTouchEventData } from '../lib/dom';\nimport { SwiperItemType } from '../types';\nimport SwiperItem from './SwiperItem';\n\nimport './Swiper.css';\n\nexport type Props = {\n  items: Array<SwiperItemType>;\n};\n\nconst MIN_SWIPE_REQUIRED = 40;\n\nfunction Swiper({ items }: Props) {\n  const containerRef = useRef<HTMLUListElement>(null);\n  const containerWidthRef = useRef(0);\n  const minOffsetXRef = useRef(0);\n  const currentOffsetXRef = useRef(0);\n  const startXRef = useRef(0);\n  const [offsetX, setOffsetX, offsetXRef] = useStateRef(0);\n  const [isSwiping, setIsSwiping] = useState(false);\n  const [currentIdx, setCurrentIdx] = useState(0);\n\n  const onTouchMove = (e: TouchEvent | MouseEvent) => {\n    const currentX = getTouchEventData(e).clientX;\n    const diff = getRefValue(startXRef) - currentX;\n    let newOffsetX = getRefValue(currentOffsetXRef) - diff;\n\n    const maxOffsetX = 0;\n    const minOffsetX = getRefValue(minOffsetXRef);\n\n    if (newOffsetX > maxOffsetX) {\n      newOffsetX = maxOffsetX;\n    }\n\n    if (newOffsetX < minOffsetX) {\n      newOffsetX = minOffsetX;\n    }\n\n    setOffsetX(newOffsetX);\n  };\n  const onTouchEnd = () => {\n    const currentOffsetX = getRefValue(currentOffsetXRef);\n    const containerWidth = getRefValue(containerWidthRef);\n    let newOffsetX = getRefValue(offsetXRef);\n\n    const diff = currentOffsetX - newOffsetX;\n\n    // we need to check difference in absolute/positive value (if diff is more than 40px)\n    if (Math.abs(diff) > MIN_SWIPE_REQUIRED) {\n      if (diff > 0) {\n        // swipe to the right if diff is positive\n        newOffsetX = Math.floor(newOffsetX / containerWidth) * containerWidth;\n      } else {\n        // swipe to the left if diff is negative\n        newOffsetX = Math.ceil(newOffsetX / containerWidth) * containerWidth;\n      }\n    } else {\n      // remain in the current image\n      newOffsetX = Math.round(newOffsetX / containerWidth) * containerWidth;\n    }\n\n    setIsSwiping(false);\n    setOffsetX(newOffsetX);\n    setCurrentIdx(Math.abs(newOffsetX / containerWidth));\n\n    window.removeEventListener('touchend', onTouchEnd);\n    window.removeEventListener('touchmove', onTouchMove);\n    window.removeEventListener('mouseup', onTouchEnd);\n    window.removeEventListener('mousemove', onTouchMove);\n  };\n  const onTouchStart = (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => {\n    setIsSwiping(true);\n\n    currentOffsetXRef.current = getRefValue(offsetXRef);\n    startXRef.current = getTouchEventData(e).clientX;\n\n    const containerEl = getRefValue(containerRef);\n    const containerWidth = containerEl.offsetWidth;\n\n    containerWidthRef.current = containerWidth;\n    minOffsetXRef.current = containerWidth - containerEl.scrollWidth;\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n    window.addEventListener('mousemove', onTouchMove);\n    window.addEventListener('mouseup', onTouchEnd);\n  };\n  const indicatorOnClick = (idx: number) => {\n    const containerEl = getRefValue(containerRef);\n    const containerWidth = containerEl.offsetWidth;\n\n    setCurrentIdx(idx);\n    setOffsetX(-(containerWidth * idx));\n  };\n\n  return (\n    <div\n      className=\"swiper-container\"\n      onTouchStart={onTouchStart}\n      onMouseDown={onTouchStart}\n    >\n      <ul\n        ref={containerRef}\n        className={`swiper-list ${isSwiping ? 'is-swiping' : ''}`}\n        style={{ transform: `translate3d(${offsetX}px, 0, 0)` }}\n      >\n        {items.map((item, idx) => (\n          <SwiperItem key={idx} {...item} />\n        ))}\n      </ul>\n      <ul className=\"swiper-indicator\">\n        {items.map((_item, idx) => (\n          <li\n            key={idx}\n            className={`swiper-indicator-item ${\n              currentIdx === idx ? 'active' : ''\n            }`}\n            onClick={() => indicatorOnClick(idx)}\n            data-testid=\"indicator\"\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Swiper;\n","import './App.css';\nimport Swiper from './components/Swiper';\n\nfunction App() {\n  const items = [\n    {\n      imageSrc: process.env.PUBLIC_URL + '/pic1.jpeg',\n      imageAlt: \"A person's eye\",\n    },\n    {\n      imageSrc: process.env.PUBLIC_URL + '/pic2.jpeg',\n      imageAlt: 'A rock formation',\n    },\n    {\n      imageSrc: process.env.PUBLIC_URL + '/pic3.jpeg',\n      imageAlt: 'Some flowers',\n    },\n    {\n      imageSrc: process.env.PUBLIC_URL + '/pic4.jpeg',\n      imageAlt: 'An egyptian wall painting',\n    },\n    {\n      imageSrc: process.env.PUBLIC_URL + '/pic5.jpeg',\n      imageAlt: 'A butterfly on a leaf',\n    },\n  ];\n\n  return (\n    <div className=\"container\">\n      <Swiper items={items} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}